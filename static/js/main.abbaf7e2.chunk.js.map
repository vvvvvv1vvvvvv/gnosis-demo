{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Column","Table","App","useState","currentAddress","setCurrentAddress","txs","setTxs","isModalVisible","setIsModalVisible","txDetail","setTxDetail","safeInfo","setSafeInfo","confirmTransaction","hash","data","axios","post","handleClick","a","provider","ethers","providers","Web3Provider","window","web3","currentProvider","owner1","getSigner","listAccounts","accounts","ethAdapterOwner1","EthersAdapter","signer","safeAddress","Safe","create","ethAdapter","safeSdk","createTransaction","to","value","safeTransaction","signTransaction","getTransactionHash","safe","toChecksumAddress","Number","operation","gasToken","safeTxGas","baseGas","gasPrice","refundReceiver","nonce","contractTransactionHash","sender","signature","signatures","get","toLowerCase","init","handleConfirm","tx","intToHex","handleExecute","confirmations","Promise","all","map","confirm","sig","EthSignSignature","owner","addSignature","connect","safeSdk3","executeTransaction","ethereum","request","method","params","res","on","info","results","useEffect","className","style","marginBottom","type","onClick","dataSource","title","dataIndex","render","row","JSON","stringify","find","length","threshold","isExecuted","visible","onOk","onCancel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abbaf7e2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { toChecksumAddress } from \"web3-utils\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { Table, Button, Modal } from \"antd\";\nimport Safe, {\n  EthersAdapter,\n  EthSignSignature,\n} from \"@gnosis.pm/safe-core-sdk\";\nimport { intToHex } from \"ethereumjs-util\";\nimport \"antd/dist/antd.min.css\";\n\nconst { Column } = Table;\n\nexport const EMPTY_DATA = \"0x\";\n\nexport const sameString = (str1, str2) => {\n  if (!str1 || !str2) {\n    return false;\n  }\n\n  return str1.toLowerCase() === str2.toLowerCase();\n};\n\nfunction App() {\n  const [currentAddress, setCurrentAddress] = useState(null);\n  const [txs, setTxs] = useState([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [txDetail, setTxDetail] = useState(\"\");\n  const [safeInfo, setSafeInfo] = useState(null);\n\n  const postTransaction = (address, data) => {\n    return axios.post(\n      `https://safe-transaction.gnosis.io/api/v1/safes/${toChecksumAddress(\n        \"0x9f18623f08eeBEcAEa7A404C9A6Cc451994fA4Dc\"\n      )}/multisig-transactions/`,\n      data\n    );\n  };\n\n  const confirmTransaction = (hash, data) => {\n    return axios.post(\n      `https://safe-transaction.gnosis.io/api/v1/multisig-transactions/${hash}/confirmations/`,\n      data\n    );\n  };\n\n  const getTransactions = () => {\n    return axios.get(\n      `https://safe-transaction.gnosis.io/api/v1/safes/0x9f18623f08eeBEcAEa7A404C9A6Cc451994fA4Dc/multisig-transactions/`\n    );\n  };\n\n  const getSafeInfo = () => {\n    return axios.get(\n      \"https://safe-transaction.gnosis.io/api/v1/safes/0x9f18623f08eeBEcAEa7A404C9A6Cc451994fA4Dc/\"\n    );\n  };\n\n  const handleClick = async () => {\n    const provider = new ethers.providers.Web3Provider(\n      window.web3.currentProvider\n    );\n    const owner1 = provider.getSigner(0);\n    const accounts = await owner1.provider.listAccounts();\n    const ethAdapterOwner1 = new EthersAdapter({\n      ethers,\n      signer: owner1,\n    });\n    const safeAddress = \"0x9f18623f08eeBEcAEa7A404C9A6Cc451994fA4Dc\";\n    const safeSdk = await Safe.create({\n      ethAdapter: ethAdapterOwner1,\n      safeAddress,\n    });\n    const safeTransaction = await safeSdk.createTransaction({\n      to: \"0x5853ed4f26a3fcea565b3fbc698bb19cdf6deb85\",\n      value: \"0x38d7ea4c68000\",\n      data: \"0x\",\n    });\n    await safeSdk.signTransaction(safeTransaction);\n    const hash = await safeSdk.getTransactionHash(safeTransaction);\n    await postTransaction(safeAddress, {\n      safe: toChecksumAddress(safeAddress),\n      to: toChecksumAddress(safeTransaction.data.to),\n      value: Number(safeTransaction.data.value),\n      data: safeTransaction.data.data,\n      operation: safeTransaction.data.operation,\n      gasToken: safeTransaction.data.gasToken,\n      safeTxGas: safeTransaction.data.safeTxGas,\n      baseGas: safeTransaction.data.baseGas,\n      gasPrice: safeTransaction.data.gasPrice,\n      refundReceiver: safeTransaction.data.refundReceiver,\n      nonce: safeTransaction.data.nonce,\n      contractTransactionHash: hash,\n      sender: toChecksumAddress(accounts[0]),\n      signature: safeTransaction.signatures.get(\n        accounts[0].toLowerCase()\n      ).data,\n    });\n    init();\n  };\n\n  const handleConfirm = async (tx) => {\n    const provider = new ethers.providers.Web3Provider(\n      window.web3.currentProvider\n    );\n    const owner1 = provider.getSigner(0);\n    const ethAdapterOwner1 = new EthersAdapter({\n      ethers,\n      signer: owner1,\n    });\n    const safeAddress = \"0x9f18623f08eeBEcAEa7A404C9A6Cc451994fA4Dc\";\n    const safeSdk = await Safe.create({\n      ethAdapter: ethAdapterOwner1,\n      safeAddress,\n    });\n    const safeTransaction = await safeSdk.createTransaction({\n      gasPrice: tx.gasPrice,\n      gasToken: tx.gasToken,\n      nonce: tx.nonce,\n      refundReceiver: tx.refundReceiver,\n      to: tx.to,\n      value: intToHex(Number(tx.value)),\n      data: tx.data || \"0x\",\n      safeTxGas: tx.safeTxGas,\n      baseGas: tx.baseGas,\n      operation: tx.operation,\n    });\n    await safeSdk.signTransaction(safeTransaction);\n    const hash = await safeSdk.getTransactionHash(safeTransaction);\n    const signature = safeTransaction.signatures.get(\n      currentAddress.toLowerCase()\n    ).data;\n    await confirmTransaction(hash, { signature });\n    init();\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleViewDetail = (tx) => {\n    setTxDetail(\n      JSON.stringify(\n        {\n          gasPrice: tx.gasPrice,\n          gasToken: tx.gasToken,\n          nonce: tx.nonce,\n          refundReceiver: tx.refundReceiver,\n          to: tx.to,\n          value: intToHex(Number(tx.value)),\n          data: tx.data || \"0x\",\n          safeTxGas: tx.safeTxGas,\n          baseGas: tx.baseGas,\n          operation: tx.operation,\n        },\n        null,\n        2\n      )\n    );\n    setIsModalVisible(true);\n  };\n\n  const handleExecute = async (tx) => {\n    const provider = new ethers.providers.Web3Provider(\n      window.web3.currentProvider\n    );\n    const owner1 = provider.getSigner(0);\n    const ethAdapterOwner1 = new EthersAdapter({\n      ethers,\n      signer: owner1,\n    });\n    const safeAddress = \"0x9f18623f08eeBEcAEa7A404C9A6Cc451994fA4Dc\";\n    const safeSdk = await Safe.create({\n      ethAdapter: ethAdapterOwner1,\n      safeAddress,\n    });\n    const safeTransaction = await safeSdk.createTransaction({\n      gasPrice: tx.gasPrice,\n      gasToken: tx.gasToken,\n      nonce: tx.nonce,\n      refundReceiver: tx.refundReceiver,\n      to: tx.to,\n      value: intToHex(Number(tx.value)),\n      data: tx.data || \"0x\",\n      safeTxGas: tx.safeTxGas,\n      baseGas: tx.baseGas,\n      operation: tx.operation,\n    });\n    if (tx.confirmations) {\n      await Promise.all(\n        tx.confirmations.map((confirm) => {\n          const sig = new EthSignSignature(confirm.owner, confirm.signature);\n          return safeTransaction.addSignature(sig);\n        })\n      );\n    }\n    const safeSdk3 = await safeSdk.connect({\n      ethAdapter: ethAdapterOwner1,\n      safeAddress,\n    });\n    await safeSdk3.executeTransaction(safeTransaction);\n  };\n\n  const init = async () => {\n    const res = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n      params: [],\n    });\n    window.ethereum.on('accountsChanged', init);\n    const info = await getSafeInfo();\n    const { data } = await getTransactions();\n    setCurrentAddress(res[0]);\n    setSafeInfo(info.data);\n    setTxs(data.results);\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div style={{ marginBottom: \"10px\" }}>\n        <Button type=\"primary\" onClick={handleClick}>Create Transaction</Button>\n      </div>\n      <Table dataSource={txs}>\n        <Column title=\"safeTxHash\" dataIndex=\"safeTxHash\" key=\"safeTxHash\" />\n        <Column\n          title=\"submissionDate\"\n          dataIndex=\"submissionDate\"\n          key=\"submissionDate\"\n        />\n        <Column\n          title=\"confirmations\"\n          dataIndex=\"confirmations\"\n          key=\"confirmations\"\n          render={(confirmations) => {\n            return confirmations.map((confirm) => <p>{confirm.owner}</p>);\n          }}\n        />\n        <Column\n          title=\"operation\"\n          render={(row) => {\n            return (\n              <>\n                <Button type=\"link\" onClick={() => handleViewDetail(row)}>\n                  View Detail\n                </Button>\n                {!row.confirmations.find(\n                  (confirm) =>\n                    confirm.owner.toLowerCase() === currentAddress.toLowerCase()\n                ) && (\n                  <Button type=\"primary\" onClick={() => handleConfirm(row)}>\n                    Confirm\n                  </Button>\n                )}\n                {row.confirmations.length >= safeInfo.threshold &&\n                  !row.isExecuted && (\n                    <Button type=\"link\" onClick={() => handleExecute(row)}>\n                      Execute\n                    </Button>\n                  )}\n              </>\n            );\n          }}\n        />\n      </Table>\n      <Modal\n        title=\"Basic Modal\"\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <pre>{txDetail}</pre>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}